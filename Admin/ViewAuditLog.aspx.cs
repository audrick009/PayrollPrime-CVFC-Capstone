using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Data.SqlClient;
using CrystalDecisions.CrystalReports.Engine;
using CrystalDecisions.Shared;

public partial class Admin_ViewAuditLog : System.Web.UI.Page
{
    Helper aud = new Helper();
    SqlConnection con = new SqlConnection(Helper.GetCon());
    SqlConnection tcon = new SqlConnection(Helper.GetCon());
    Array[] tempDBdata;
    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["position"] != null)
        {
            if (Session["position"].ToString() == "Admin")
            {
                if (!IsPostBack)
                {
                    getAudit();
                    GetEmployees();

                }
            }
            else
            {
                Response.Redirect("../Login.aspx");
            }
        }
        else
        {
            Response.Redirect("../Login.aspx");
        }
    }
    

    void getReportPCov()
    {
        DateTime start = DateTime.Parse(txtStart.Text);
        DateTime end = DateTime.Parse(txtEnd.Text);
        ReportDocument rpt = new ReportDocument();
        rpt.Load(Server.MapPath("~/Reports/AuditLogReport-PCov.rpt"));
        rpt.SetDatabaseLogon("sa", "dbpass", "DESKTOP-JQC0U4J", "CVFCPayroll");
        rpt.SetParameterValue("startdate", txtStart.Text);
        rpt.SetParameterValue("enddate", txtEnd.Text);
        rpt.SetParameterValue("starttext", start.ToString(" MMMM dd,yyyy "));
        rpt.SetParameterValue("endtext", end.ToString(" MMMM dd,yyyy "));
        rpt.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, Response, true, "Employee Audit Log Records as of " + DateTime.Now.ToString());
    }
    void getReportEmp()
    {
        ReportDocument rpt = new ReportDocument();
        rpt.Load(Server.MapPath("~/Reports/AuditLogReport-Emp.rpt"));
        rpt.SetDatabaseLogon("sa", "dbpass", "DESKTOP-JQC0U4J", "CVFCPayroll");
        rpt.SetParameterValue("EmployeeID", ddlEmployees.SelectedValue);
        rpt.ExportToHttpResponse(CrystalDecisions.Shared.ExportFormatType.PortableDocFormat, Response, true, "Employee Audit Log Records as of " + DateTime.Now.ToString());
    }

    protected void btnGenRep_Click(object sender, EventArgs e)
    {
        createTempDb();
        getTempDbData();
        aud.AuditLog(EncryptHelper.Encrypt("Audit logs Report", Helper.GetSalt()), int.Parse(Session["empid"].ToString()), EncryptHelper.Encrypt("Generated by date", Helper.GetSalt()));
        getReportPCov();
    }

    protected void btnGenRepEmp_Click(object sender, EventArgs e)
    {
        createTempDb();
        getTempDbData();
        aud.AuditLog(EncryptHelper.Encrypt("Audit logs Report", Helper.GetSalt()), int.Parse(Session["empid"].ToString()), EncryptHelper.Encrypt("Generated audit logs for: " + ddlEmployees.SelectedItem.Text, Helper.GetSalt()));
        getReportEmp();
    }

    protected void lvAudit_ItemDataBound(object sender, ListViewItemEventArgs e)
    {

        
        if (e.Item.ItemType == ListViewItemType.DataItem)
        {
            Label Desc = (Label)e.Item.FindControl("Description");
            Label Event = (Label)e.Item.FindControl("Event");
            String dcydesc = EncryptHelper.Decrypt(Desc.Text, Helper.GetSalt());
            String dcyevent = EncryptHelper.Decrypt(Event.Text, Helper.GetSalt());
            Desc.Text = dcydesc;
            Event.Text = dcyevent;
        }
    }

    public void GetEmployees()
    {
        con.Open();
        SqlCommand com = new SqlCommand();
        com.Connection = con;
        com.CommandText = "SELECT EmployeeID, (FirstName +' '+ MiddleName +' '+ LastName) AS FullName FROM Employee";
        SqlDataReader dr = com.ExecuteReader();
        ddlEmployees.DataSource = dr;
        ddlEmployees.DataTextField = "FullName";
        ddlEmployees.DataValueField = "EmployeeID";
        ddlEmployees.DataBind();


        con.Close();
    }

    void getAudit()
    {
        con.Open();
        SqlCommand com = new SqlCommand();
        com.Connection = con;
        com.CommandText = "SELECT a.AuditRID, e.EmployeeID, e.LastName, e.FirstName, a.TimeStamp, " +
            "a.Event, a.Description FROM AuditLogs a INNER JOIN Employee e ON a.EmployeeID = e.EmployeeID ORDER BY a.AuditRID DESC";
        SqlDataAdapter da = new SqlDataAdapter(com);
        DataSet ds = new DataSet();
        da.Fill(ds, "Audit");
        lvAudit.DataSource = ds;
        lvAudit.DataBind();
        con.Close();
    }

    public void createTempDb() {
        con.Open();
        SqlCommand com = new SqlCommand();
        com.Connection = con;
        com.CommandText = "CREATE TABLE [dbo].[EncAuditLogs]([EncAuditRID] [int] IDENTITY(1,1) NOT NULL,[EmployeeID] [int] NOT NULL,[TimeStamp] [datetime] NOT NULL,[Event] [nvarchar](max) NOT NULL,[Description] [nvarchar](max) NOT NULL,CONSTRAINT [PK_EncAuditLogs] PRIMARY KEY CLUSTERED ([EncAuditRID] ASC)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
        com.ExecuteNonQuery();
        con.Close();
    }
    public void getTempDbData() {
        con.Open();
        SqlCommand com = new SqlCommand();
        com.Connection = con;
        com.CommandText = "Select * From Auditlogs";
        SqlDataReader aki = com.ExecuteReader();
        if (aki.HasRows) {
            while (aki.Read()) {
                List<String> datalist = new List<string>();
                datalist.Add(aki["EmployeeID"].ToString());
                datalist.Add(DateTime.Parse(aki["TimeStamp"].ToString()).ToString());
                datalist.Add(aki["Event"].ToString());
                datalist.Add(aki["Description"].ToString());
                insertTempDbData(datalist);
            }
        }
        con.Close();
    }
    public void insertTempDbData(List<String> list) {
        tcon.Open();
        SqlCommand com = new SqlCommand();
        com.Connection = tcon;
        com.CommandText = "INSERT INTO EncAuditLogs VALUES (@EmployeeID,@TimeStamp,@Event,@Description)";
        com.Parameters.AddWithValue("@EmployeeID", list[0]);
        com.Parameters.AddWithValue("@TimeStamp", DateTime.Parse(list[1]));
        com.Parameters.AddWithValue("@Event", EncryptHelper.Decrypt(list[2],Helper.GetSalt()));
        com.Parameters.AddWithValue("@Description", EncryptHelper.Decrypt(list[3],Helper.GetSalt()));
        com.ExecuteNonQuery();
        tcon.Close();
    }
    public void dropTempDb() {
        con.Open();
        SqlCommand com = new SqlCommand();
        com.Connection = con;
        com.CommandText = "If exists (select name from sysobjects where name = 'EncAuditLogs') DROP TABLE [dbo].[EncAuditLogs]";
        com.ExecuteNonQuery();
        con.Close();
    }
}